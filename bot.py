import telebot
import os
from telebot import types
import sqlite3
from datetime import datetime, timedelta
import logging
import threading
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.getenv("TOKEN")
bot = telebot.TeleBot(TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('riddle_bot.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS chats (
                    chat_id INTEGER PRIMARY KEY,
                    title TEXT,
                    members_count INTEGER)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS riddles (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    chat_id INTEGER,
                    user_id INTEGER,
                    riddle_text TEXT,
                    answer TEXT,
                    prize TEXT,
                    time_limit INTEGER,
                    message_id INTEGER,
                    active INTEGER DEFAULT 1,
                    end_time INTEGER,
                    hint TEXT,
                    hint_delay INTEGER,
                    start_time INTEGER,
                    photo_id TEXT)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS scores (
                    user_id INTEGER,
                    chat_id INTEGER,
                    points INTEGER DEFAULT 0,
                    PRIMARY KEY (user_id, chat_id))''')

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
try:
    cursor.execute("ALTER TABLE riddles ADD COLUMN end_time INTEGER")
    logger.info("–°—Ç–æ–ª–±–µ—Ü end_time –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É riddles")
except sqlite3.OperationalError:
    logger.info("–°—Ç–æ–ª–±–µ—Ü end_time —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
try:
    cursor.execute("ALTER TABLE riddles ADD COLUMN hint TEXT")
    logger.info("–°—Ç–æ–ª–±–µ—Ü hint –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É riddles")
except sqlite3.OperationalError:
    logger.info("–°—Ç–æ–ª–±–µ—Ü hint —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
try:
    cursor.execute("ALTER TABLE riddles ADD COLUMN hint_delay INTEGER")
    logger.info("–°—Ç–æ–ª–±–µ—Ü hint_delay –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É riddles")
except sqlite3.OperationalError:
    logger.info("–°—Ç–æ–ª–±–µ—Ü hint_delay —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
try:
    cursor.execute("ALTER TABLE riddles ADD COLUMN start_time INTEGER")
    logger.info("–°—Ç–æ–ª–±–µ—Ü start_time –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É riddles")
except sqlite3.OperationalError:
    logger.info("–°—Ç–æ–ª–±–µ—Ü start_time —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
try:
    cursor.execute("ALTER TABLE riddles ADD COLUMN photo_id TEXT")
    logger.info("–°—Ç–æ–ª–±–µ—Ü photo_id –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É riddles")
except sqlite3.OperationalError:
    logger.info("–°—Ç–æ–ª–±–µ—Ü photo_id —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

conn.commit()

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —á–∞—Ç–∞—Ö
def update_data():
    logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —á–∞—Ç–∞—Ö")
    cursor.execute("SELECT chat_id FROM chats")
    chats = cursor.fetchall()
    for (chat_id,) in chats:
        try:
            chat = bot.get_chat(chat_id)
            members_count = bot.get_chat_member_count(chat_id)
            cursor.execute("UPDATE chats SET title = ?, members_count = ? WHERE chat_id = ?",
                           (chat.title, members_count, chat_id))
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞ {chat_id}: {chat.title}, {members_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —Ç–∏–ø: {chat.type}")
        except Exception as e:
            logger.error(f"–ß–∞—Ç {chat_id} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}. –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã.")
            cursor.execute("DELETE FROM chats WHERE chat_id = ?", (chat_id,))
            cursor.execute("DELETE FROM riddles WHERE chat_id = ?", (chat_id,))
        conn.commit()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu(user_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ —á–∞—Ç", "üìú –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤")
    markup.add("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞", "‚ÑπÔ∏è –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è")
    bot.send_message(user_id, "‚ú® *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!* ‚ú®\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá", reply_markup=markup)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id, chat_id):
    try:
        member = bot.get_chat_member(chat_id, user_id)
        return member.status in ['administrator', 'creator']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞ –¥–ª—è user_id {user_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")
        return False

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ
def is_member(user_id, chat_id):
    try:
        bot.get_chat_member(chat_id, user_id)
        return True
    except Exception as e:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ —á–∞—Ç–µ {chat_id}: {e}")
        return False

# –¢–∞–π–º–µ—Ä –¥–ª—è –∑–∞–≥–∞–¥–∫–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
def riddle_timer(riddle_id, chat_id, message_id, time_limit, riddle_text, prize, hint, hint_delay):
    MAX_TIME_LIMIT = 1440
    time_limit = int(time_limit) if time_limit is not None else None
    if time_limit and time_limit > MAX_TIME_LIMIT:
        time_limit = MAX_TIME_LIMIT
        logger.info(f"–¢–∞–π–º–µ—Ä –¥–ª—è –∑–∞–≥–∞–¥–∫–∏ {riddle_id} –æ–≥—Ä–∞–Ω–∏—á–µ–Ω {MAX_TIME_LIMIT} –º–∏–Ω—É—Ç–∞–º–∏")

    start_time = int(time.time())
    end_time = start_time + time_limit * 60 if time_limit else None
    cursor.execute("UPDATE riddles SET end_time = ? WHERE id = ?", (end_time, riddle_id))
    conn.commit()

    hint_sent = False
    hint_time = None
    if hint:
        if time_limit:
            hint_time = start_time + int(time_limit * 60 * 0.8)  # 80% –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        elif hint_delay is not None:
            hint_time = start_time + hint_delay * 60  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    while True:
        cursor.execute("SELECT active FROM riddles WHERE id = ?", (riddle_id,))
        active = cursor.fetchone()
        if not active or active[0] == 0:
            logger.info(f"–¢–∞–π–º–µ—Ä –¥–ª—è –∑–∞–≥–∞–¥–∫–∏ {riddle_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –∑–∞–≥–∞–¥–∫–∞ —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞")
            break

        current_time = int(time.time())

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏
        if hint and not hint_sent and hint_time and current_time >= hint_time:
            try:
                bot.send_message(chat_id, f"üí° *–ü–û–î–°–ö–ê–ó–ö–ê!!* üí°\n\n{hint}")
                logger.info(f"–ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –∑–∞–≥–∞–¥–∫–∏ {riddle_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç {chat_id}")
                hint_sent = True
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –∑–∞–≥–∞–¥–∫–∏ {riddle_id}: {e}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        if time_limit:
            remaining = end_time - current_time
            if remaining <= 0:
                try:
                    cursor.execute("UPDATE riddles SET active = 0 WHERE id = ?", (riddle_id,))
                    conn.commit()
                    bot.edit_message_text(chat_id=chat_id, message_id=message_id, 
                                        text=f"‚è∞ *–í—Ä–µ–º—è –≤—ã—à–ª–æ!* ‚è∞\n\n{riddle_text}\n\n*–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏–∫—Ç–æ –Ω–µ —É–≥–∞–¥–∞–ª...* üòî\n–ó–∞–≥–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", 
                                        parse_mode="Markdown")
                    logger.info(f"–ó–∞–≥–∞–¥–∫–∞ {riddle_id} –≤ —á–∞—Ç–µ {chat_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ —Ç–∞–π–º–µ—Ä—É")
                    threading.Timer(1800, lambda: bot.delete_message(chat_id, message_id)).start()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥–∞–¥–∫–∏ {riddle_id}: {e}")
                break
            else:
                minutes, seconds = divmod(remaining, 60)
                try:
                    bot.edit_message_text(chat_id=chat_id, message_id=message_id, 
                                        text=f"üö® *–ó–ê–ì–ê–î–ö–ê!* üö®\n\n{riddle_text}\n\nüéÅ *–ü–†–ò–ó:*\n{prize}\n\n‚è∞ *–û—Å—Ç–∞–ª–æ—Å—å:* {minutes} –º–∏–Ω {seconds} —Å–µ–∫\n\nüí¨ *–ö–∞–∫ –æ—Ç–≤–µ—Ç–∏—Ç—å?* –†–µ–ø–ª–∞–π –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–∏–º –æ—Ç–≤–µ—Ç–æ–º!",
                                        parse_mode="Markdown")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –∑–∞–≥–∞–¥–∫–∏ {riddle_id}: {e}")
                    if "message to edit not found" in str(e):
                        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –∑–∞–≥–∞–¥–∫–∏ {riddle_id}")
                        break
                sleep_time = 60 if minutes > 60 else 5
                time.sleep(sleep_time)
        else:
            time.sleep(5)  # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–∞–π–º–µ—Ä–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'], chat_types=['private'])
def start(message):
    user_id = message.from_user.id
    username = message.from_user.username or "NoUsername"
    cursor.execute("INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)", (user_id, username))
    conn.commit()
    logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} (@{username})")
    bot.send_message(user_id, "üëã *–ü—Ä–∏–≤–µ—Ç!* üëã\n\n–Ø –±–æ—Ç-–∑–∞–≥–∞–¥–æ—á–Ω–∏–∫! üéâ\n–î–æ–±–∞–≤—å –º–µ–Ω—è –≤ —á–∞—Ç, –∏ –¥–∞–≤–∞–π –∏–≥—Ä–∞—Ç—å! üöÄ\n\n*P.S.* –î–∞–π –º–Ω–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —á—Ç–æ–±—ã –≤—Å—ë —Ä–∞–±–æ—Ç–∞–ª–æ! üòâ")
    main_menu(user_id)

@bot.message_handler(commands=['zagadka'], chat_types=['group', 'supergroup'])
def zagadka_command(message):
    user_id = message.from_user.id
    bot.send_message(message.chat.id, "‚ú® *–•–æ—á–µ—à—å –∑–∞–≥–∞–¥–∫—É?* ‚ú®\n\n–ü–µ—Ä–µ–π–¥–∏ –≤ –õ–° –±–æ—Ç–∞, —á—Ç–æ–±—ã –µ—ë —Å–æ–∑–¥–∞—Ç—å! üëá")
    bot.send_message(user_id, "üëã *–ü—Ä–∏–≤–µ—Ç!* üëã\n\n–î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –∫—Ä—É—Ç—É—é –∑–∞–≥–∞–¥–∫—É! üé≤\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ üëá", reply_markup=main_menu(user_id))

@bot.message_handler(commands=['top_all'], chat_types=['private'])
def top_all(message):
    user_id = message.from_user.id
    cursor.execute("SELECT user_id, SUM(points) as total_points FROM scores GROUP BY user_id ORDER BY total_points DESC LIMIT 10")
    top_users = cursor.fetchall()
    if not top_users:
        bot.send_message(user_id, "üèÜ *–û–±—â–∏–π —Ç–æ–ø –æ—Ç–≥–∞–¥—á–∏–∫–æ–≤* üèÜ\n\n–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ç–≥–∞–¥–∞–ª –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–≥–∞–¥–∫–∏! üòÖ\n–ë—É–¥—å –ø–µ—Ä–≤—ã–º! üöÄ")
        return
    text = "üèÜ *–û–±—â–∏–π —Ç–æ–ø –æ—Ç–≥–∞–¥—á–∏–∫–æ–≤* üèÜ\n\n"
    for i, (user_id, points) in enumerate(top_users, 1):
        username = cursor.execute("SELECT username FROM users WHERE user_id = ?", (user_id,)).fetchone()[0]
        text += f"{i}. @{username} ‚Äî {points} –æ—á–∫–æ–≤ üåü\n"
    bot.send_message(user_id, text, parse_mode="Markdown")

@bot.message_handler(commands=['riddlekings'], chat_types=['group', 'supergroup'])
def top_chat(message):
    chat_id = message.chat.id
    cursor.execute("SELECT user_id, points FROM scores WHERE chat_id = ? ORDER BY points DESC LIMIT 10", (chat_id,))
    top_users = cursor.fetchall()
    if not top_users:
        bot.send_message(chat_id, f"üèÜ *–¢–æ–ø –æ—Ç–≥–∞–¥—á–∏–∫–æ–≤ –≤ {bot.get_chat(chat_id).title}* üèÜ\n\n–ü–æ–∫–∞ –∑–¥–µ—Å—å –Ω–µ—Ç –º–∞—Å—Ç–µ—Ä–æ–≤ –∑–∞–≥–∞–¥–æ–∫! üòÆ\n–°—Ç–∞–Ω—å –ø–µ—Ä–≤—ã–º! üí™")
        return
    text = f"üèÜ *–¢–æ–ø –æ—Ç–≥–∞–¥—á–∏–∫–æ–≤ –≤ {bot.get_chat(chat_id).title}* üèÜ\n\n"
    for i, (user_id, points) in enumerate(top_users, 1):
        username = cursor.execute("SELECT username FROM users WHERE user_id = ?", (user_id,)).fetchone()[0]
        text += f"{i}. @{username} ‚Äî {points} –æ—á–∫–æ–≤ üåü\n"
    bot.send_message(chat_id, text, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –õ–°
@bot.message_handler(content_types=['text'], chat_types=['private'])
def handle_text_private(message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    update_data()

    if bot.get_state(user_id, chat_id) is not None:
        if message.text in ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ —á–∞—Ç", "üìú –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞", "‚ÑπÔ∏è –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è"]:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ", callback_data="cancel"))
            bot.send_message(user_id, "‚õî *–û–π-–æ–π!* ‚õî\n\n–¢—ã —Å–µ–π—á–∞—Å —Å–æ–∑–¥–∞—ë—à—å –∑–∞–≥–∞–¥–∫—É! –ó–∞–≤–µ—Ä—à–∏ –µ—ë –∏–ª–∏ –Ω–∞–∂–º–∏ '–û—Ç–º–µ–Ω–∏—Ç—å' üëá", reply_markup=markup)
            return

    if message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ —á–∞—Ç":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª '–î–æ–±–∞–≤–∏—Ç—å –≤ —á–∞—Ç'")
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚ú® –î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", url=f"https://t.me/{bot.get_me().username}?startgroup=true"))
        bot.send_message(user_id, "üéâ *–î–æ–±–∞–≤—å –º–µ–Ω—è –≤ —á–∞—Ç!* üéâ\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –≤—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É! üëá\n*P.S.* –ù–µ –∑–∞–±—É–¥—å –¥–∞—Ç—å –º–Ω–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞! üòâ", reply_markup=markup)
    
    elif message.text == "üìú –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫> —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤")
        cursor.execute("SELECT chat_id, title, members_count FROM chats")
        chats = cursor.fetchall()
        if not chats:
            bot.send_message(user_id, "üòî *–ü—É—Å—Ç–æ!* üòî\n\n–ë–æ—Ç –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∏ –≤ –æ–¥–∏–Ω —á–∞—Ç. –î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ —á–∞—Ç'! üëá")
        else:
            markup = types.InlineKeyboardMarkup()
            for chat in chats:
                chat_id, title, members_count = chat
                if is_admin(user_id, chat_id):
                    cursor.execute("SELECT COUNT(*) FROM riddles WHERE chat_id = ? AND active = 1", (chat_id,))
                    active_riddles = cursor.fetchone()[0]
                    markup.add(types.InlineKeyboardButton(f"üí¨ {title}\nüë• {members_count} —á–µ–ª. | üß© {active_riddles}", callback_data=f"chat_{chat_id}"))
                else:
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∞–¥–º–∏–Ω –≤ —á–∞—Ç–µ {chat_id}")
            if not markup.keyboard:
                bot.send_message(user_id, "üòî *–£–ø—Å!* üòî\n\n–¢—ã –Ω–µ –∞–¥–º–∏–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º —á–∞—Ç–µ, –≥–¥–µ —è –µ—Å—Ç—å. –î–æ–±–∞–≤—å –º–µ–Ω—è –∏ –¥–∞–π –ø—Ä–∞–≤–∞! üòâ")
            else:
                bot.send_message(user_id, "üåü *–¢–≤–æ–∏ —á–∞—Ç—ã (–≥–¥–µ —Ç—ã –∞–¥–º–∏–Ω):* üåü\n\n–í—ã–±–µ—Ä–∏ —á–∞—Ç –¥–ª—è –∑–∞–≥–∞–¥–∫–∏ üëá", reply_markup=markup)
    
    elif message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_global"))
        markup.add(types.InlineKeyboardButton("üë• –ß–∞—Ç—ã –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data="stats_chats_users"))
        bot.send_message(user_id, "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞* üìä\n\n–í—ã–±–µ—Ä–∏, —á—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å üëá", reply_markup=markup)
    
    elif message.text == "‚ÑπÔ∏è –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é")
        instruction = (
            "‚ú® *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º-–∑–∞–≥–∞–¥–æ—á–Ω–∏–∫–æ–º?* ‚ú®\n\n"
            "üëá *–ü—Ä–æ—Å—Ç–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*\n"
            "  1. *–î–æ–±–∞–≤—å –º–µ–Ω—è –≤ —á–∞—Ç* ‚ûï –ù–∞–∂–º–∏ '–î–æ–±–∞–≤–∏—Ç—å –≤ —á–∞—Ç', –≤—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É –∏ –¥–∞–π –º–Ω–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞.\n"
            "  2. *–°–æ–∑–¥–∞–π –∑–∞–≥–∞–¥–∫—É* üß© –í –õ–° –≤—ã–±–µ—Ä–∏ '–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤', –∑–∞—Ç–µ–º —á–∞—Ç, –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç, –æ—Ç–≤–µ—Ç –∏ –ø—Ä–∏–∑.\n"
            "  3. *–ù–∞—Å—Ç—Ä–æ–π –≤—Ä–µ–º—è –∏ –ø–æ–¥—Å–∫–∞–∑–∫—É* ‚è≥ –£–∫–∞–∂–∏ —Ç–∞–π–º–µ—Ä (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏) –∏ –¥–æ–±–∞–≤—å –ø–æ–¥—Å–∫–∞–∑–∫—É (–ø–æ –∂–µ–ª–∞–Ω–∏—é).\n"
            "  4. *–ñ–¥–∏ –æ—Ç–≥–∞–¥–æ–∫* üéâ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –±—É–¥—É—Ç –æ—Ç–≤–µ—á–∞—Ç—å, –∞ —Ç—ã —É–∑–Ω–∞–µ—à—å, –∫—Ç–æ –ø–æ–±–µ–¥–∏–ª!\n\n"
            "üéØ *–ö–æ–º–∞–Ω–¥—ã –≤ —á–∞—Ç–µ:*\n"
            "  - `/riddlekings` ‚Äî —Ç–æ–ø –æ—Ç–≥–∞–¥—á–∏–∫–æ–≤ –∑–¥–µ—Å—å\n\n"
            "üèÜ *–†–µ–π—Ç–∏–Ω–≥ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            "  - –í –õ–°: `/top_all` ‚Äî –æ–±—â–∏–π —Ç–æ–ø\n"
            "  - 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞' ‚Äî –≤—Å–µ —É—Å–ø–µ—Ö–∏!\n\n"
            "üí° *–ü–æ–¥—Å–∫–∞–∑–∫–∏:* –ø–æ—è–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ 80% –≤—Ä–µ–º–µ–Ω–∏ (–µ—Å–ª–∏ —Ç–∞–π–º–µ—Ä –µ—Å—Ç—å) –∏–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É (–µ—Å–ª–∏ —Ç–∞–π–º–µ—Ä–∞ –Ω–µ—Ç).\n\n"
            "üéâ –ì–æ—Ç–æ–≤–æ! –ó–∞–≥–∞–¥—ã–≤–∞–π –∏ –æ—Ç–≥–∞–¥—ã–≤–∞–π! –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ—è—Å–Ω–æ, –ø–∏—à–∏ –º–Ω–µ –≤ –õ–°! üöÄ"
        )
        bot.send_message(user_id, instruction, parse_mode="Markdown")

# –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫
@bot.message_handler(content_types=['new_chat_members'])
def new_chat_member(message):
    for member in message.new_chat_members:
        if member.id == bot.get_me().id:
            chat_id = message.chat.id
            title = message.chat.title
            members_count = bot.get_chat_member_count(chat_id)
            cursor.execute("INSERT OR IGNORE INTO chats (chat_id, title, members_count) VALUES (?, ?, ?)",
                           (chat_id, title, members_count))
            conn.commit()
            logger.info(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}, —Ç–∏–ø: {message.chat.type}")
            bot.send_message(chat_id, "üéâ *–£—Ä–∞! –Ø –∑–¥–µ—Å—å!* üéâ\n\n–î–∞–π—Ç–µ –º–Ω–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —á—Ç–æ–±—ã —è –º–æ–≥ —Ç–≤–æ—Ä–∏—Ç—å –º–∞–≥–∏—é –∑–∞–≥–∞–¥–æ–∫! ‚ú®")

# –í—ã–±–æ—Ä —á–∞—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–∞–¥–∫–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("chat_"))
def select_chat(call):
    chat_id = int(call.data.split("_")[1])
    user_id = call.from_user.id
    if not is_admin(user_id, chat_id):
        bot.send_message(user_id, "‚õî *–û–π!* ‚õî\n\n–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–≥–∞–¥–∫–∏! –ü–æ–ø—Ä–æ—Å–∏ –ø—Ä–∞–≤–∞ —É –∞–¥–º–∏–Ω–∞ —á–∞—Ç–∞! üòä")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–ª—Å—è —Å–æ–∑–¥–∞—Ç—å –∑–∞–≥–∞–¥–∫—É –≤ —á–∞—Ç–µ {chat_id}, –Ω–æ –Ω–µ –∞–¥–º–∏–Ω")
        return
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —á–∞—Ç {chat_id} –¥–ª—è –∑–∞–≥–∞–¥–∫–∏")
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel"))
    bot.send_message(user_id, "üß© *–°–æ–∑–¥–∞—ë–º –∑–∞–≥–∞–¥–∫—É!* üß©\n\n–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∑–∞–≥–∞–¥–∫–∏ –≤ –õ–° üëá", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(user_id, get_riddle, chat_id, user_id)

def get_riddle(message, chat_id, user_id):
    if message.chat.id != user_id:
        bot.send_message(user_id, "‚õî *–≠–π!* ‚õî\n\n–ü–∏—à–∏ –∑–∞–≥–∞–¥–∫—É –≤ –õ–°, –∞ –Ω–µ –≤ —á–∞—Ç–µ! üòâ")
        return
    riddle_text = message.text
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"photo_skip_{chat_id}_{user_id}|{riddle_text}"))
    markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel"))
    bot.send_message(user_id, "üì∏ *–î–æ–±–∞–≤—å —Ñ–æ—Ç–æ!* üì∏\n\n–ü—Ä–∏–∫—Ä–µ–ø–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É –∫ –∑–∞–≥–∞–¥–∫–µ –∏–ª–∏ –Ω–∞–∂–º–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' üëá", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(user_id, get_photo, chat_id, user_id, riddle_text)

@bot.callback_query_handler(func=lambda call: call.data.startswith("photo_skip_"))
def photo_skip(call):
    try:
        data = call.data[len("photo_skip_"):].split("|", 1)
        ids, riddle_text = data[0].split("_"), data[1]
        chat_id, user_id = int(ids[0]), int(ids[1])
        get_photo(None, chat_id, user_id, riddle_text)
    except (IndexError, ValueError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ callback_data –≤ photo_skip: {e}, data: {call.data}")
        bot.send_message(call.from_user.id, "‚õî *–£–ø—Å!* ‚õî\n\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ —Ñ–æ—Ç–æ. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ! üòÖ")
        main_menu(call.from_user.id)

def get_photo(message, chat_id, user_id, riddle_text):
    if message and message.chat.id != user_id:
        bot.send_message(user_id, "‚õî *–≠–π!* ‚õî\n\n–û—Ç–ø—Ä–∞–≤–ª—è–π —Ñ–æ—Ç–æ –≤ –õ–°, –∞ –Ω–µ –≤ —á–∞—Ç! üòâ")
        return
    photo_id = message.photo[-1].file_id if message and message.photo else None
    if message and message.text == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        photo_id = None
    elif message and not photo_id:
        bot.send_message(user_id, "‚õî *–û–π!* ‚õî\n\n–ü—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'! üëá")
        return
    
    bot.clear_step_handler_by_chat_id(user_id)
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel"))
    bot.send_message(user_id, "üîë *–ö–∞–∫–æ–π –æ—Ç–≤–µ—Ç?* üîë\n\n–ù–∞–ø–∏—à–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –õ–° üëá", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(user_id, get_answer, chat_id, user_id, riddle_text, photo_id)

def get_answer(message, chat_id, user_id, riddle_text, photo_id):
    if message.chat.id != user_id:
        bot.send_message(user_id, "‚õî *–≠–π!* ‚õî\n\n–ü–∏—à–∏ –æ—Ç–≤–µ—Ç –≤ –õ–°, –∞ –Ω–µ –≤ —á–∞—Ç–µ! üòâ")
        return
    answer = message.text
    
    bot.clear_step_handler_by_chat_id(user_id)
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel"))
    bot.send_message(user_id, "üéÅ *–ö–∞–∫–æ–π –ø—Ä–∏–∑?* üéÅ\n\n–£–∫–∞–∂–∏ –ø—Ä–∏–∑ –¥–ª—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è üëá", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(user_id, get_prize, chat_id, user_id, riddle_text, photo_id, answer)

def get_prize(message, chat_id, user_id, riddle_text, photo_id, answer):
    if message.chat.id != user_id:
        bot.send_message(user_id, "‚õî *–≠–π!* ‚õî\n\n–ü–∏—à–∏ –ø—Ä–∏–∑ –≤ –õ–°, –∞ –Ω–µ –≤ —á–∞—Ç–µ! üòâ")
        return
    prize = message.text
    cursor.execute("INSERT INTO riddles (chat_id, user_id, riddle_text, answer, prize, photo_id, active) VALUES (?, ?, ?, ?, ?, ?, 0)",
                   (chat_id, user_id, riddle_text, answer, prize, photo_id))
    conn.commit()
    riddle_id = cursor.lastrowid
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚è≥ –ó–∞–¥–∞—Ç—å –≤—Ä–µ–º—è", callback_data=f"time_set_{riddle_id}"))
    markup.add(types.InlineKeyboardButton("‚è∞ –ë–µ–∑ —Ç–∞–π–º–µ—Ä–∞", callback_data=f"time_none_{riddle_id}"))
    markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel"))
    bot.send_message(user_id, "‚è≥ *–ù—É–∂–µ–Ω —Ç–∞–π–º–µ—Ä?* ‚è≥\n\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π? üëá", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("time_set_"))
def get_time_set(call):
    riddle_id = int(call.data.split("_")[2])
    cursor.execute("SELECT chat_id, user_id, riddle_text, photo_id, answer, prize FROM riddles WHERE id = ?", (riddle_id,))
    chat_id, user_id, riddle_text, photo_id, answer, prize = cursor.fetchone()
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel"))
    bot.send_message(call.from_user.id, "‚è≥ *–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç?* ‚è≥\n\n–í–≤–µ–¥–∏ –≤—Ä–µ–º—è (–º–∞–∫—Å–∏–º—É–º 1440) üëá", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(call.from_user.id, get_time, chat_id, call.from_user.id, riddle_text, photo_id, answer, prize, riddle_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("time_none_"))
def get_time_none(call):
    riddle_id = int(call.data.split("_")[2])
    cursor.execute("SELECT chat_id, user_id, riddle_text, photo_id, answer, prize FROM riddles WHERE id = ?", (riddle_id,))
    chat_id, user_id, riddle_text, photo_id, answer, prize = cursor.fetchone()
    cursor.execute("UPDATE riddles SET time_limit = NULL WHERE id = ?", (riddle_id,))
    conn.commit()
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üí° –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É", callback_data=f"hint_add_{riddle_id}"))
    markup.add(types.InlineKeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"hint_skip_{riddle_id}"))
    markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel"))
    bot.send_message(call.from_user.id, "üí° *–ù—É–∂–Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞?* üí°\n\n–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É? üëá", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("hint_add_"))
def get_hint_add(call):
    riddle_id = int(call.data.split("_")[2])
    cursor.execute("SELECT chat_id, user_id, riddle_text, photo_id, answer, prize, time_limit FROM riddles WHERE id = ?", (riddle_id,))
    chat_id, user_id, riddle_text, photo_id, answer, prize, time_limit = cursor.fetchone()
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel"))
    bot.send_message(call.from_user.id, "üí° *–¢–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏* üí°\n\n–ù–∞–ø–∏—à–∏ –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ üëá", reply_markup=markup)
    bot.register_next_step_handler_by_chat_id(call.from_user.id, get_hint, chat_id, user_id, riddle_text, photo_id, answer, prize, time_limit, riddle_id)

@bot.callback_query_handler(func=lambda call: call.data.startswith("hint_skip_"))
def get_hint_skip(call):
    riddle_id = int(call.data.split("_")[2])
    cursor.execute("SELECT chat_id, user_id, riddle_text, photo_id, answer, prize, time_limit FROM riddles WHERE id = ?", (riddle_id,))
    chat_id, user_id, riddle_text, photo_id, answer, prize, time_limit = cursor.fetchone()
    get_hint(None, chat_id, user_id, riddle_text, photo_id, answer, prize, time_limit, riddle_id)

def get_time(message, chat_id, user_id, riddle_text, photo_id, answer, prize, riddle_id):
    if message.chat.id != user_id:
        bot.send_message(user_id, "‚õî *–≠–π!* ‚õî\n\n–ü–∏—à–∏ –≤—Ä–µ–º—è –≤ –õ–°, –∞ –Ω–µ –≤ —á–∞—Ç–µ! üòâ")
        return
    time_limit = message.text
    if not time_limit.isdigit():
        bot.send_message(user_id, "‚õî *–û–π!* ‚õî\n\n–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –≤ –º–∏–Ω—É—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10)! üëá")
        return
    time_limit = int(time_limit)
    if time_limit > 1440:
        time_limit = 1440
        bot.send_message(user_id, "‚ö†Ô∏è *–ú–∞–∫—Å–∏–º—É–º!* ‚ö†Ô∏è\n\n–¢–∞–π–º–µ—Ä –æ–≥—Ä–∞–Ω–∏—á–µ–Ω 1440 –º–∏–Ω—É—Ç–∞–º–∏ (24 —á–∞—Å–∞).")
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üí° –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É", callback_data=f"hint_add_{riddle_id}"))
    markup.add(types.InlineKeyboardButton("‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"hint_skip_{riddle_id}"))
    markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel"))
    cursor.execute("UPDATE riddles SET time_limit = ? WHERE id = ?", (time_limit, riddle_id))
    conn.commit()
    bot.send_message(user_id, "üí° *–ù—É–∂–Ω–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞?* üí°\n\n–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É? üëá", reply_markup=markup)

def get_hint(message, chat_id, user_id, riddle_text, photo_id, answer, prize, time_limit, riddle_id):
    if message and message.chat.id != user_id:
        bot.send_message(user_id, "‚õî *–≠–π!* ‚õî\n\n–ü–∏—à–∏ –ø–æ–¥—Å–∫–∞–∑–∫—É –≤ –õ–°, –∞ –Ω–µ –≤ —á–∞—Ç–µ! üòâ")
        return
    hint = message.text if message else None
    cursor.execute("UPDATE riddles SET hint = ?, time_limit = ? WHERE id = ?", (hint, time_limit, riddle_id))
    conn.commit()
    if hint and not time_limit:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel"))
        bot.send_message(user_id, "‚è≥ *–ö–æ–≥–¥–∞ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É?* ‚è≥\n\n–ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç (–∏–ª–∏ '0' –¥–ª—è —Å—Ä–∞–∑—É)? üëá", reply_markup=markup)
        bot.register_next_step_handler_by_chat_id(user_id, get_hint_delay, chat_id, user_id, riddle_text, photo_id, answer, prize, time_limit, hint, riddle_id)
    else:
        show_riddle_preview(chat_id, user_id, riddle_text, photo_id, answer, prize, time_limit, None, riddle_id)

def get_hint_delay(message, chat_id, user_id, riddle_text, photo_id, answer, prize, time_limit, hint, riddle_id):
    if message.chat.id != user_id:
        bot.send_message(user_id, "‚õî *–≠–π!* ‚õî\n\n–ü–∏—à–∏ –≤—Ä–µ–º—è –≤ –õ–°, –∞ –Ω–µ –≤ —á–∞—Ç–µ! üòâ")
        return
    hint_delay = message.text
    if not hint_delay.isdigit():
        bot.send_message(user_id, "‚õî *–û–π!* ‚õî\n\n–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –≤ –º–∏–Ω—É—Ç–∞—Ö –∏–ª–∏ '0'! üëá")
        return
    hint_delay = int(hint_delay)
    cursor.execute("UPDATE riddles SET hint_delay = ? WHERE id = ?", (hint_delay, riddle_id))
    conn.commit()
    show_riddle_preview(chat_id, user_id, riddle_text, photo_id, answer, prize, time_limit, hint_delay, riddle_id)

def show_riddle_preview(chat_id, user_id, riddle_text, photo_id, answer, prize, time_limit, hint_delay, riddle_id):
    time_limit = int(time_limit) if time_limit is not None else None
    preview = (
        f"üö® *–ó–ê–ì–ê–î–ö–ê!* üö®\n\n"
        f"{riddle_text}\n\n"
        f"üéÅ *–ü–†–ò–ó:*\n{prize}\n\n"
        f"‚è∞ *–í—Ä–µ–º—è:* {time_limit if time_limit is not None else '–Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ'} –º–∏–Ω"
    )
    cursor.execute("SELECT hint FROM riddles WHERE id = ?", (riddle_id,))
    hint = cursor.fetchone()[0]
    if hint:
        if time_limit is not None:
            hint_time = int((time_limit * 60) * 0.8)
            preview += f"\n\nüí° *–ü–æ–¥—Å–∫–∞–∑–∫–∞ —á–µ—Ä–µ–∑:* {hint_time} —Å–µ–∫"
        elif hint_delay is not None:
            preview += f"\n\nüí° *–ü–æ–¥—Å–∫–∞–∑–∫–∞ —á–µ—Ä–µ–∑:* {hint_delay} –º–∏–Ω"
        else:
            preview += f"\n\nüí° *–ü–æ–¥—Å–∫–∞–∑–∫–∞ —Å—Ä–∞–∑—É!*"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç", callback_data=f"send_{riddle_id}"))
    markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel"))
    if photo_id:
        bot.send_photo(user_id, photo_id, caption=preview, parse_mode="Markdown", reply_markup=markup)
    else:
        bot.send_message(user_id, preview, parse_mode="Markdown", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("send_"))
def send_riddle(call):
    riddle_id = int(call.data.split("_")[1])
    cursor.execute("SELECT chat_id, user_id, riddle_text, photo_id, answer, prize, time_limit, hint, hint_delay FROM riddles WHERE id = ?", (riddle_id,))
    chat_id, user_id, riddle_text, photo_id, answer, prize, time_limit, hint, hint_delay = cursor.fetchone()
    time_limit = int(time_limit) if time_limit is not None else None
    
    text = (
        f"üö® *–ó–ê–ì–ê–î–ö–ê!* üö®\n\n"
        f"{riddle_text}\n\n"
        f"üéÅ *–ü–†–ò–ó:*\n{prize}\n\n"
        f"üí¨ *–ö–∞–∫ –æ—Ç–≤–µ—Ç–∏—Ç—å?* –†–µ–ø–ª–∞–π –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–≤–æ–∏–º –æ—Ç–≤–µ—Ç–æ–º!"
    )
    if time_limit:
        text += f"\n\n‚è∞ *–í—Ä–µ–º—è:* {time_limit} –º–∏–Ω"
    if photo_id:
        msg = bot.send_photo(chat_id, photo_id, caption=text, parse_mode="Markdown")
    else:
        msg = bot.send_message(chat_id, text, parse_mode="Markdown")
    
    start_time = int(time.time())
    cursor.execute("UPDATE riddles SET message_id = ?, start_time = ?, active = 1 WHERE id = ?",
                   (msg.message_id, start_time, riddle_id))
    conn.commit()
    logger.info(f"–ó–∞–≥–∞–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç {chat_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} —Å message_id {msg.message_id}")
    bot.send_message(call.from_user.id, "‚ú® *–ì–æ—Ç–æ–≤–æ!* ‚ú®\n\n–ó–∞–≥–∞–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç! üéâ")
    
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)
        logger.info(f"–£–¥–∞–ª–µ–Ω–æ –ø—Ä–µ–≤—å—é –∑–∞–≥–∞–¥–∫–∏ –≤ –õ–° –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–≤—å—é –≤ –õ–°: {e}")
    
    threading.Thread(target=riddle_timer, args=(riddle_id, chat_id, msg.message_id, time_limit, riddle_text, prize, hint, hint_delay), daemon=True).start()

@bot.callback_query_handler(func=lambda call: call.data == "cancel")
def cancel_riddle(call):
    user_id = call.from_user.id
    cursor.execute("DELETE FROM riddles WHERE user_id = ? AND active = 0", (user_id,))
    conn.commit()
    bot.send_message(user_id, "‚ùå *–û—Ç–º–µ–Ω–µ–Ω–æ!* ‚ùå\n\n–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–∞–¥–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! üòä")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–∞–¥–∫–∏")
    bot.clear_step_handler_by_chat_id(user_id)
    main_menu(user_id)

@bot.callback_query_handler(func=lambda call: call.data in ["stats_global", "stats_chats_users"])
def show_stats(call):
    user_id = call.from_user.id
    if call.data == "stats_global":
        cursor.execute("SELECT COUNT(*) FROM riddles")
        total_riddles = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM riddles WHERE active = 0")
        solved_riddles = cursor.fetchone()[0]
        cursor.execute("SELECT AVG(end_time - start_time) / 60 FROM riddles WHERE active = 0 AND end_time IS NOT NULL")
        avg_time = cursor.fetchone()[0] or 0
        text = (
            f"üìà *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞* üìà\n\n"
            f"‚ú® –°–æ–∑–¥–∞–Ω–æ –∑–∞–≥–∞–¥–æ–∫: {total_riddles}\n"
            f"‚úÖ –û—Ç–≥–∞–¥–∞–Ω–æ: {solved_riddles} ({solved_riddles/total_riddles*100:.1f}%)\n"
            f"‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≥–∞–¥–∫–∏: {avg_time:.1f} –º–∏–Ω"
        )
        bot.send_message(user_id, text, parse_mode="Markdown")
    elif call.data == "stats_chats_users":
        cursor.execute("SELECT COUNT(*) FROM chats")
        total_chats = cursor.fetchone()[0]
        cursor.execute("SELECT chat_id, members_count FROM chats")
        chats = cursor.fetchall()
        total_members = sum(members_count for _, members_count in chats)
        text = (
            f"üë• *–ß–∞—Ç—ã –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏* üë•\n\n"
            f"üí¨ –ß–∞—Ç–æ–≤ —Å –±–æ—Ç–æ–º: {total_chats}\n"
            f"üë§ –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_members}"
        )
        bot.send_message(user_id, text, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
incorrect_messages = {}

@bot.message_handler(content_types=['text'], chat_types=['group', 'supergroup'])
def check_answer(message):
    global incorrect_messages
    chat_id = message.chat.id
    user_id = message.from_user.id
    
    if not message.reply_to_message:
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id} –æ—Ç {user_id}: '{message.text}' - –Ω–µ –æ—Ç–≤–µ—Ç")
        return
    
    reply_to_id = message.reply_to_message.message_id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç–µ {chat_id} –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {reply_to_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{message.text}'")

    cursor.execute("SELECT id, answer, prize, user_id, message_id FROM riddles WHERE chat_id = ? AND message_id = ? AND active = 1",
                   (chat_id, reply_to_id))
    riddle = cursor.fetchone()
    
    if riddle:
        riddle_id, correct_answer, prize, creator_id, riddle_message_id = riddle
        user_answer = message.text.lower().strip()
        correct_answer = correct_answer.lower().strip()
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞–≥–∞–¥–∫—É {riddle_id}: '{user_answer}' vs '{correct_answer}'")
        
        if user_answer == correct_answer:
            winner_message = bot.reply_to(message, f"üéâ *–£—Ä–∞! –ó–∞–≥–∞–¥–∫–∞ —Ä–∞–∑–≥–∞–¥–∞–Ω–∞!* üéâ\n\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, @{message.from_user.username}! üèÜ")
            cursor.execute("UPDATE riddles SET active = 0, end_time = ? WHERE id = ?", (int(time.time()), riddle_id))
            cursor.execute("INSERT OR IGNORE INTO scores (user_id, chat_id, points) VALUES (?, ?, 0)", (user_id, chat_id))
            cursor.execute("UPDATE scores SET points = points + 1 WHERE user_id = ? AND chat_id = ?", (user_id, chat_id))
            conn.commit()
            logger.info(f"–ó–∞–≥–∞–¥–∫–∞ {riddle_id} —Ä–∞–∑–≥–∞–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
            
            try:
                bot.delete_message(chat_id, riddle_message_id)
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥–∞–¥–∫–∏ {riddle_message_id} –≤ —á–∞—Ç–µ {chat_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {riddle_message_id}: {e}")
            
            if chat_id not in incorrect_messages:
                incorrect_messages[chat_id] = []
            for msg_id in incorrect_messages[chat_id]:
                try:
                    bot.delete_message(chat_id, msg_id)
                    logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º {msg_id} –≤ —á–∞—Ç–µ {chat_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id}: {e}")
            incorrect_messages[chat_id] = []
            
            if prize:
                bot.send_message(user_id, f"ü•≥ *–ü–æ–±–µ–¥–∞!* ü•≥\n\n–¢—ã –æ—Ç–≥–∞–¥–∞–ª –∑–∞–≥–∞–¥–∫—É! üéâ\n–¢–≤–æ–π –ø—Ä–∏–∑: *{prize}*")
            else:
                creator = cursor.execute("SELECT username FROM users WHERE user_id = ?", (creator_id,)).fetchone()[0]
                bot.send_message(user_id, f"ü•≥ *–ü–æ–±–µ–¥–∞!* ü•≥\n\n–¢—ã –æ—Ç–≥–∞–¥–∞–ª –∑–∞–≥–∞–¥–∫—É! üéâ\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å @{creator} –∑–∞ –ø—Ä–∏–∑–æ–º!")
        else:
            incorrect_msg = bot.reply_to(message, "‚ùå *–ù–µ —É–≥–∞–¥–∞–ª!* ‚ùå\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! üòâ")
            if chat_id not in incorrect_messages:
                incorrect_messages[chat_id] = []
            incorrect_messages[chat_id].append(incorrect_msg.message_id)
            logger.info(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç '{user_answer}' –Ω–∞ –∑–∞–≥–∞–¥–∫—É {riddle_id}, message_id {incorrect_msg.message_id}")
    else:
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {reply_to_id} –≤ —á–∞—Ç–µ {chat_id} –Ω–µ —Å–≤—è–∑–∞–Ω–æ —Å –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–≥–∞–¥–∫–æ–π")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.polling(none_stop=True)